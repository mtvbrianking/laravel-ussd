#!/usr/bin/env php
<?php

declare(strict_types=1);

$dir = __DIR__.'/../vendor';

if (! file_exists($dir.'/autoload.php')) {
    $dir = __DIR__.'/../../..';
}

if (! file_exists($dir.'/autoload.php')) {
    echo 'Autoload not found.';
    exit(1);
}

require $dir.'/autoload.php';

use Illuminate\Support\Arr;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\Question\Question;

class Simulator extends Command
{
    protected function configure(): void
    {
        $this
            ->setName($_SERVER['argv'][0])
            ->setDefinition(
                new InputDefinition([
                    new InputArgument('phone_number', InputArgument::REQUIRED, 'MSISDN'),
                    new InputOption('--dail', '-d', InputOption::VALUE_OPTIONAL, 'User request'),
                    new InputOption('--service_code', '-s', InputOption::VALUE_REQUIRED, 'USSD shortcode', '*123#'),
                    new InputOption('--network_code', '-n', InputOption::VALUE_OPTIONAL, 'Network code'),
                    new InputOption('--session_id', '-z', InputOption::VALUE_OPTIONAL, 'Session ID (Auto Gen)'),
                    // ...
                    new InputOption('--config', '-c', InputOption::VALUE_OPTIONAL, 'Simulator config file', 'simulator.json'),
                    new InputOption('--aggregator', '-a', InputOption::VALUE_OPTIONAL, 'USSD aggregator'),
                    new InputOption('--provider', '-p', InputOption::VALUE_OPTIONAL, 'Aggregator Class'),
                    new InputOption('--uri', '-u', InputOption::VALUE_REQUIRED, 'USSD Service Base URI'),
                ])
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $defaults = $this->readConfig($input, $output);

        $params = $this->buildParams($input, $defaults);

        $uri = $input->getOption('uri') ?? Arr::get($defaults, 'uri');
        $provider = $input->getOption('provider') ?? Arr::get($defaults, 'provider');

        // $output->writeln(sprintf("Provider: %s\nUri: %s\n", $provider, $uri));

        try {
            $data = (new $provider)->call($uri, $params);

            $qnHelper = $this->getHelper('question');

            $answer = $qnHelper->ask($input, $output, new Question("{$data}\n"));

            while(true) {
                $params['new_session'] = false;
                $params['input'] = $answer;
                $params['answers'] .= "*{$answer}";

                $data = (new $provider)->call($uri, $params);

                $answer = $qnHelper->ask($input, $output, new Question("\n{$data}\n"));
            }
        } catch(\Exception $ex) {
            $output->writeln(PHP_EOL . $ex->getMessage());
        }

        return Command::SUCCESS;
    }

    protected function readConfig(InputInterface $input, OutputInterface $output): array
    {
        $qnHelper = $this->getHelper('question');

        $configFile = $input->getOption('config');

        if(! (is_file($configFile) && is_readable($configFile))) {
            $output->writeln("<error>Can't read config file '{$configFile}'</error>");
            exit(Command::FAILURE);
        }

        $configJson = file_get_contents($configFile);

        $configJson = preg_replace('/[\\\\]+/', '\\\\\\\\', $configJson);

        $config = json_decode($configJson, true);

        if($config === null) {
            $output->writeln(sprintf("<error>%s --> JSON . %s</error>", $configFile, json_last_error_msg()));
            exit(Command::FAILURE);
        }

        $aggregator = $input->getOption('aggregator') ?? Arr::get($config, 'aggregator');

        if(! $aggregator) {
            $aggregators = array_keys($config['aggregators']);
            $choiceQn = new ChoiceQuestion('Choose aggregator: ', $aggregators);
            $choiceQn->setErrorMessage('Aggregator %s is invalid.');
            $aggregator = $qnHelper->ask($input, $output, $choiceQn);
        }

        return Arr::get($config, "aggregators.{$aggregator}");
    }

    protected function buildParams(InputInterface $input, array $config = []): array
    {
        $session_id = $input->getOption('session_id') ?? Arr::get($config, 'session_id', uniqid());
        $phone_number = $input->getArgument('phone_number') ?? Arr::get($config, 'phone_number');
        $service_code = $input->getOption('service_code') ?? Arr::get($config, 'service_code');
        $network_code = $input->getOption('network_code') ?? Arr::get($config, 'network_code');
        $dail = $input->getOption('dail') ?? $service_code;

        $service_code = $this->clean($service_code);
        $dail = $this->clean($dail) ?? $service_code;
        $answers = $this->clean(str_replace($service_code, '', $dail));

        return [
            'new_session' => true,
            'session_id' => $session_id,
            'network_code' => $network_code,
            'phone_number' => $phone_number,
            'input' => $dail,
            'service_code' => $service_code,
            'answers' => $answers,
        ];
    }

    protected function clean(?string $code): ?string
    {
        if(! $code) {
            return $code;
        }

        return trim(trim($code, '*'), '#');
    }
}

/**
 * @see https://symfony.com/doc/current/components/console/single_command_tool.html
 */
$app = new Application('USSD Simulator', '1.0.0');

$simulator = new Simulator();

$app->add($simulator);

$app->setDefinition(new InputDefinition([
    new InputOption('--help', '-h', InputOption::VALUE_NONE, "Display usage information"),
    new InputOption('--version', '-V', InputOption::VALUE_NONE, "Display application version"),
]));

$app->setDefaultCommand($simulator->getName(), true);

$app->run();
