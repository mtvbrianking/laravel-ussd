#!/usr/bin/env php
<?php

declare(strict_types=1);

$dir = __DIR__.'/../vendor';

if (! file_exists($dir.'/autoload.php')) {
    $dir = __DIR__.'/../../..';
}

if (! file_exists($dir.'/autoload.php')) {
    echo 'Autoload not found.';
    exit(1);
}

require $dir.'/autoload.php';

use Bmatovu\Ussd\Contracts\Aggregator;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\TransferException;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\Question\Question;

class Simulator extends Command
{
    protected function configure(): void
    {
        $this
            ->setName($_SERVER['argv'][0])
            ->setDefinition(
                new InputDefinition([
                    new InputArgument('phone', InputArgument::REQUIRED, 'MSISDN'),
                    new InputOption('--aggregator', '-a', InputOption::VALUE_OPTIONAL, 'USSD aggregator'), // ...
                    new InputOption('--dail', '-d', InputOption::VALUE_OPTIONAL, 'User request'),
                    new InputOption('--service', '-s', InputOption::VALUE_REQUIRED, 'USSD shortcode', '*156#'),
                    new InputOption('--network', '-n', InputOption::VALUE_OPTIONAL, 'Network code', '6001'),
                    new InputOption('--session', '-z', InputOption::VALUE_OPTIONAL, 'Session ID (Auto Gen)'),
                    new InputOption('--config', '-c', InputOption::VALUE_OPTIONAL, 'Simulator config file', 'simulator.php'),
                    new InputOption('--base_uri', '-u', InputOption::VALUE_REQUIRED, 'USSD Service Base URI', 'http://localhost:8000/api/ussd'), // ...
                ])
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        // check if config file exists
        //  if not ask user to create one by sharing a sample + instructions

        // if exists and has 1 line - default to that
        // else ask user to choose aggregator per run

        // ./vendr/bin/ussd ------ check in default

        // 1. check simulator config file
        // 2. validate simulator config file

        // ...

        $qnHelper = $this->getHelper('question');

        $aggregator = $input->getOption('aggregator');

        if(! $aggregator) {
            $choiceQn = new ChoiceQuestion('Choose aggregator: ', ['Generic', 'Africastalking'], 0);
            $choiceQn->setErrorMessage('Aggregator %s is invalid.');
            $aggregator = $qnHelper->ask($input, $output, $choiceQn);
        }

        $baseUri = $input->getOption('base_uri');

        if(! $baseUri) {
            $baseUri = $qnHelper->ask($input, $output, new Question("Enter USSD Service Base URI: ", 'http://localhost:8000/api/ussd'));
        }

        $uri = $baseUri . '/' . strtolower($aggregator);

        $output->writeln("\nUsing: '{$aggregator}' --> {$uri}\n");

        $session = $input->getOption('session') ?? uniqid();
        $phone = $input->getArgument('phone');
        $service = $input->getOption('service');
        $network = $input->getOption('network');
        $dail = $input->getOption('dail') ?? $service;

        $service = $this->clean($service);

        $dail = $this->clean($dail) ?? $service;

        $answers = $this->clean(str_replace($service, '', $dail));

        $body = [
            'new_session' => true,
            'session_id' => $session,
            'network_code' => $network,
            'phone_number' => $phone,
            'input' => $dail,
            'service_code' => $service,
            'answers' => $answers,
        ];

        // resolve aggregator provider once...

        $data = (new $aggregator)->call($uri, $body, $output);

        $answer = $qnHelper->ask($input, $output, new Question("{$data}\n"));

        while(true) {
            $answers .= "*" . $answer;

            $body['new_session'] = false;
            $body['input'] = $answer;
            $body['answers'] = $answers;

            $data = (new $aggregator)->call($uri, $body, $output);

            $answer = $qnHelper->ask($input, $output, new Question("\n{$data}\n"));
        }

        return Command::SUCCESS;
    }

    protected function clean(?string $code): ?string
    {
        if(! $code) {
            return $code;
        }

        return trim(trim($code, '*'), '#');
    }
}

class Generic implements Aggregator
{
    public function call(string $uri, array $data, OutputInterface $output): ?string
    {
        $params = [
            'new_session' => $data['new_session'] === true ? 'yes' : 'no',
            'session_id' => $data['session_id'],
            'network_code' => $data['network_code'],
            'phone_number' => $data['phone_number'],
            'input' => $data['input'],
            'service_code' => $data['service_code'],
        ];

        try {
            $response = (new Client)->request('POST', $uri, [
                'headers' => [
                    'Accept' => 'application/json',
                ],
                'json' => $params
            ]);

            $body = json_decode((string) $response->getBody());

            if($body->flow == 'break') {
                $output->writeln("\n<options=bold>{$body->data}</>");
                exit(Command::SUCCESS);
            }

            return $body->data;
        } catch (RequestException $ex) {
            $response = $ex->getResponse();
            $body = json_decode((string) $response->getBody());

            $msg = $body->message ?? $response->getReasonPhrase();
            $output->writeln("\n<error>{$response->getStatusCode()} . {$msg}</error>");

            exit(Command::FAILURE);
        } catch (TransferException $ex) {
            $output->writeln("\n<error>{$ex->getCode()} . {$ex->getMessage()}</error>");

            exit(Command::FAILURE);
        }
    }
}

class Africastalking implements Aggregator
{
    public function call(string $uri, array $data, OutputInterface $output): ?string
    {
        $params = [
            'sessionId' => $data['session_id'],
            'networkCode' => $data['network_code'],
            'phoneNumber' => $data['phone_number'],
            'text' => $data['answers'],
            'serviceCode' => $data['service_code'],
        ];

        try {
            $response = (new Client)->request('POST', $uri, [
                'form_params' => $params
            ]);

            $body = (string) $response->getBody();

            $cmd = substr($body, 0, 3);
            $data = substr($body, 4);

            if($cmd == 'END') {
                $output->writeln("\n<options=bold>{$data}</>");
                exit(Command::SUCCESS);
            }

            return $data;
        } catch (RequestException $ex) {
            $response = $ex->getResponse();
            $body = (string) $response->getBody();

            // $msg = substr($body, 4) ?? $response->getReasonPhrase();
            $msg = $body ?? $response->getReasonPhrase();
            $output->writeln("\n<error>{$response->getStatusCode()} . {$msg}</error>");

            exit(Command::FAILURE);
        } catch (TransferException $ex) {
            $output->writeln("\n<error>{$ex->getCode()} . {$ex->getMessage()}</error>");

            exit(Command::FAILURE);
        }
    }
}

/**
 * @see https://symfony.com/doc/current/components/console/single_command_tool.html
 */
$app = new Application('USSD Simulator', '1.0.0');

$simulator = new Simulator();

$app->add($simulator);

$app->setDefinition(new InputDefinition([
    new InputOption('--help', '-h', InputOption::VALUE_NONE, "Display usage information"),
    new InputOption('--version', '-V', InputOption::VALUE_NONE, "Display application version"),
]));

$app->setDefaultCommand($simulator->getName(), true);

$app->run();
