#!/usr/bin/env php
<?php

declare(strict_types=1);

$dir = __DIR__.'/../vendor';

if (! file_exists($dir.'/autoload.php')) {
    $dir = __DIR__.'/../../..';
}

if (! file_exists($dir.'/autoload.php')) {
    echo 'Autoload not found.';
    exit(1);
}

require $dir.'/autoload.php';

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\TransferException;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;

class Simulator extends Command
{
    protected function configure(): void
    {
        $this
            ->setName($_SERVER['argv'][0])
            ->setDefinition(
                new InputDefinition([
                    new InputArgument('phone', InputArgument::REQUIRED, 'MSISDN'),
                    new InputOption('--dail', '-d', InputOption::VALUE_OPTIONAL, 'User request'),
                    new InputOption('--service', '-s', InputOption::VALUE_REQUIRED, 'USSD shortcode', '*156#'),
                    new InputOption('--network', '-n', InputOption::VALUE_OPTIONAL, 'Network code', '6001'),
                    new InputOption('--session', '-z', InputOption::VALUE_OPTIONAL, 'Session ID (Auto Gen)'),
                    new InputOption('--api', '-a', InputOption::VALUE_REQUIRED, 'API URI', 'http://localhost:8000/api/ussd'),
                ])
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $api = $input->getOption('api');
        $session = $input->getOption('session') ?? uniqid();
        $phone = $input->getArgument('phone');
        $service = $input->getOption('service');
        $network = $input->getOption('network');
        $dail = $input->getOption('dail') ?? $service;

        $service = $this->clean($service);

        $dail = $this->clean($dail) ?? $service;

        $answer = $this->clean(str_replace($service, '', $dail));

        $body = [
            'session_id' => $session,
            'network_code' => $network,
            'phone_number' => $phone,
            'input' => $dail,
            'service_code' => $service,
            'answer' => $answer
        ];

        $data = $this->call($api, $body, $output);

        $helper = $this->getHelper('question');
        $answer = $helper->ask($input, $output, new Question("{$data}\n"));

        while(true) {
            $dail .= "*" . $answer;

            $body['input'] = $dail;
            $body['answer'] = $answer;

            $data = $this->call($api, $body, $output);

            $helper = $this->getHelper('question');
            $answer = $helper->ask($input, $output, new Question("\n{$data}\n"));
        }

        return Command::SUCCESS;
    }

    protected function call(string $apiUri, array $data, OutputInterface $output): ?string
    {
        try {
            $response = (new Client)->request('POST', $apiUri, [
                'headers' => [
                    'Accept' => 'application/json',
                ],
                'json' => $data
            ]);

            $body = json_decode((string) $response->getBody());

            if($body->flow == 'break') {
                $output->writeln("\n<options=bold>{$body->data}</>");
                exit(Command::SUCCESS);
            }

            return $body->data;
        } catch (RequestException $ex) {
            $response = $ex->getResponse();
            $body = json_decode((string) $response->getBody());

            $msg = $body->message ?? $response->getReasonPhrase();
            $output->writeln("\n<error>{$response->getStatusCode()} . {$msg}</error>");

            exit(Command::FAILURE);
        } catch (TransferException $ex) {
            $output->writeln("\n<error>{$response->getCode()} . {$ex->getMessage()}</error>");

            exit(Command::FAILURE);
        }
    }

    protected function clean(?string $code): ?string
    {
        if(! $code) {
            return $code;
        }

        return rtrim(ltrim($code, '*'), '#');
    }
}

/**
 * @see https://symfony.com/doc/current/components/console/single_command_tool.html
 */
$app = new Application('USSD Simulator', '1.0.0');

$simulator = new Simulator();

$app->add($simulator);

$app->setDefinition(new InputDefinition([
    new InputOption('--help', '-h', InputOption::VALUE_NONE, "Display usage information"),
    new InputOption('--version', '-V', InputOption::VALUE_NONE, "Display application version"),
]));

$app->setDefaultCommand($simulator->getName(), true);

$app->run();
